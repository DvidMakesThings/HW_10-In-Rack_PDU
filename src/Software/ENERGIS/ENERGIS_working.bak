/**
 * @file main.c
 * @brief Main application for ENERGIS PDU using Wiznet ioLibrary.
 * @version 1.0
 * @date 2025-03-03
 *
 * @project ENERGIS - The Managed PDU Project for 10-Inch Rack
 *
 * This example initializes the W5500 using the Wiznet ioLibrary and runs an HTTP
 * server on port 80 that serves the PDU UI pages (embedded via html_files.h).
 * The W5500 is used on SPI0 at 10MHz while the LCD continues to use SPI1 at 40MHz.
*/
#include "pico/stdlib.h"
#include "hardware/spi.h"
#include "hardware/gpio.h"
#include "hardware/clocks.h"
#include "hardware/resets.h"
#include "pico/multicore.h"
#include <stdio.h>
#include <string.h>

#include "CONFIG.h"

// Wiznet IoLibrary headers (exactly this order!)
#include "network/wizchip_conf.h"
#include "network/socket.h"
#include "network/w5x00_spi.h"

// Drivers & utilities
#include "drivers/CAT24C512_driver.h"
#include "drivers/ILI9488_driver.h"
#include "drivers/MCP23017_display_driver.h"
#include "drivers/MCP23017_relay_driver.h"
#include "utils/EEPROM_MemoryMap.h"
#include "PDU_display.h"
#include "dummy_eeprom.h"
#include "utils/helper_functions.h"
#include "startup.h"
#include "html/control.h"

// Static IP configuration
static wiz_NetInfo g_net_info;  // Keep wiz_NetInfo for compatibility


void core1_task(void);
void W5500_Init(void);

//------------------------------------------------------------------------------
// main: Performs system initialization and launches core1_task on Core 1.
int main(void) {
    stdio_init_all();
    sleep_ms(10000); // Delay for debugging

    startup_init();

    i2c_scan_bus(i2c0, "I2C0");
    i2c_scan_bus(i2c1, "I2C1");
        
    // Initialize EEPROM.
    CAT24C512_Init();
    printf("EEPROM initialized\n");
    write_dummy_eeprom_content();

    // Initialize MCP23017 I/O expanders.
    mcp_display_init();
    printf("Display-board initialized\n");
    mcp_relay_init();
    printf("Relay-board initialized\n");

    // Little showoff.
    mcp_display_write_reg(MCP23017_OLATA, 0xFF);
    mcp_display_write_reg(MCP23017_OLATB, 0xFF);
    sleep_ms(500);
    for (uint8_t i = 16; i > 0; i--) {
        mcp_display_write_pin(i - 1, 0);
        sleep_ms(50);
    }
    mcp_display_write_pin(PWR_LED, 1);
    mcp_display_write_pin(FAULT_LED, 1);

    // Initialize the ILI9488 display.
    ILI9488_Init();
    PDU_Display_Init();
    sleep_ms(200);
    PDU_Display_UpdateStatus("System initialized.");
    mcp_display_write_pin(FAULT_LED, 0);
    sleep_ms(1000);
    PDU_Display_UpdateStatus("System ready.");

    // Launch Ethernet/HTTP server handling on Core 1.
    multicore_launch_core1(core1_task);

    // Main loop on Core 0: for other tasks.
    while (true) {
        sleep_ms(1000);
    }
    
    return 0;
}

// core1_task: Runs on Core 1. Initializes Ethernet, sets network parameters,
// and starts the HTTP server.
void core1_task(void) {
    char header[128];
    int header_len;
    uint8_t server_socket = 0;
    uint16_t port = 80;

    networkInfo netConfig = LoadUserNetworkConfig(); // Get network info from EEPROM
    
    // Copy data to g_net_info
    memcpy(&g_net_info, &netConfig, sizeof(wiz_NetInfo));
    printf("Loaded network config: IP %d.%d.%d.%d\n", 
        g_net_info.ip[0], g_net_info.ip[1], g_net_info.ip[2], g_net_info.ip[3]);

    wizchip_spi_initialize();
    wizchip_cris_initialize();
    wizchip_reset();
    wizchip_initialize();
    wizchip_check();
    network_initialize(g_net_info);
    print_network_information(g_net_info);

    PDU_Display_UpdateIP(g_net_info.ip);
    PDU_Display_UpdateConnectionStatus(1);
    mcp_display_write_pin(ETH_LED, 1);
    
    if (socket(server_socket, Sn_MR_TCP, port, 0) != server_socket) {
        printf("Socket failed\n");
        return;
    }

    if (listen(server_socket) != SOCK_OK) {
        close(server_socket);
        return;
    }

    uint8_t last_status = 0xFF;  // Store the last known status to detect changes

    while (1) {
        uint8_t status = getSn_SR(server_socket);

        // Log status change only when it differs from the last known status
        if (status != last_status) {
            printf("[DEBUG] Socket Status Changed: 0x%02X\n", status);
            last_status = status;
        }

        switch (getSn_SR(server_socket)) {
            case SOCK_ESTABLISHED:
                printf("[INFO] Client connected.\n");

                if (getSn_IR(server_socket) & Sn_IR_CON) {
                    setSn_IR(server_socket, Sn_IR_CON);
                    printf("[DEBUG] Connection established flag cleared.\n");
                }

                int32_t recv_len = recv(server_socket, (uint8_t*)header, sizeof(header));
                printf("[DEBUG] Received data length: %d bytes\n", recv_len);

                if (recv_len > 0) {                    
                    header_len = sprintf(header,
                        "HTTP/1.1 200 OK\r\n"
                        "Content-Type: text/html\r\n"
                        "Content-Length: %d\r\n"
                        "Connection: close\r\n"
                        "\r\n",
                        (int)strlen(control_html)
                    );
                    printf("[INFO] Sending HTTP response. Content size: %d bytes\n", (int)strlen(control_html));


                    send(server_socket, (uint8_t *)header, header_len);
                    send(server_socket, (uint8_t *)control_html, strlen(control_html));
                    close(server_socket);

                    printf("[INFO] Connection closed. Reinitializing server socket...\n");

                    socket(server_socket, Sn_MR_TCP, port, 0);
                    listen(server_socket);
                }
                break;

            case SOCK_CLOSE_WAIT:
                printf("[DEBUG] Connection close requested.\n");
                close(server_socket);
                printf("[INFO] Socket closed. Reopening...\n");
                socket(server_socket, Sn_MR_TCP, port, 0);
                listen(server_socket);
                break;

            case SOCK_CLOSED:
                printf("[WARNING] Socket unexpectedly closed. Reopening...\n");
                socket(server_socket, Sn_MR_TCP, port, 0);
                listen(server_socket);
                break;

            default:
                break;  // No log spam if status hasn't changed
        }

        sleep_ms(10);
    }

}    